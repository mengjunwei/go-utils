// Autogenerated by Thrift Compiler (0.12.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package metrics

import (
	"bytes"
	"context"
	"fmt"
	"reflect"

	"github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

// Attributes:
//  - Time
//  - Value
//  - MetricKey
type Metric struct {
	Time      int64   `thrift:"Time,1,required" db:"Time" json:"Time"`
	Value     float64 `thrift:"Value,2,required" db:"Value" json:"Value"`
	MetricKey string  `thrift:"MetricKey,3,required" db:"MetricKey" json:"MetricKey"`
}

func NewMetric() *Metric {
	return &Metric{}
}

func (p *Metric) GetTime() int64 {
	return p.Time
}

func (p *Metric) GetValue() float64 {
	return p.Value
}

func (p *Metric) GetMetricKey() string {
	return p.MetricKey
}
func (p *Metric) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetTime bool = false
	var issetValue bool = false
	var issetMetricKey bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
				issetTime = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.DOUBLE {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
				issetValue = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
				issetMetricKey = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetTime {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Time is not set"))
	}
	if !issetValue {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Value is not set"))
	}
	if !issetMetricKey {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field MetricKey is not set"))
	}
	return nil
}

func (p *Metric) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Time = v
	}
	return nil
}

func (p *Metric) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Value = v
	}
	return nil
}

func (p *Metric) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.MetricKey = v
	}
	return nil
}

func (p *Metric) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Metric"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Metric) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Time", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Time: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Time)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Time (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Time: ", p), err)
	}
	return err
}

func (p *Metric) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Value", thrift.DOUBLE, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Value: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.Value)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Value (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Value: ", p), err)
	}
	return err
}

func (p *Metric) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("MetricKey", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:MetricKey: ", p), err)
	}
	if err := oprot.WriteString(string(p.MetricKey)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.MetricKey (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:MetricKey: ", p), err)
	}
	return err
}

func (p *Metric) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Metric(%+v)", *p)
}

// Attributes:
//  - List
type Metrics struct {
	List []*Metric `thrift:"List,1,required" db:"List" json:"List"`
}

func NewMetrics() *Metrics {
	return &Metrics{
		List: []*Metric{},
	}
}

func (p *Metrics) GetList() []*Metric {
	return p.List
}
func (p *Metrics) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetList bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
				issetList = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetList {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field List is not set"))
	}
	return nil
}

func (p *Metrics) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*Metric, 0, size)
	p.List = tSlice
	for i := 0; i < size; i++ {
		_elem0 := &Metric{}
		if err := _elem0.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
		}
		p.List = append(p.List, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *Metrics) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Metrics"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Metrics) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("List", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:List: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.List)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.List {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:List: ", p), err)
	}
	return err
}

func (p *Metrics) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Metrics(%+v)", *p)
}

type MetricsTransfer interface {
	// Parameters:
	//  - Ms
	Transfer(ctx context.Context, ms *Metrics) (r int32, err error)
	// Parameters:
	//  - Ms
	//  - Datasource
	TransferWithDatasource(ctx context.Context, ms *Metrics, datasource string) (r int32, err error)
}

type MetricsTransferClient struct {
	c thrift.TClient
}

func NewMetricsTransferClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *MetricsTransferClient {
	return &MetricsTransferClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewMetricsTransferClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *MetricsTransferClient {
	return &MetricsTransferClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewMetricsTransferClient(c thrift.TClient) *MetricsTransferClient {
	return &MetricsTransferClient{
		c: c,
	}
}

func (p *MetricsTransferClient) Client_() thrift.TClient {
	return p.c
}

// Parameters:
//  - Ms
func (p *MetricsTransferClient) Transfer(ctx context.Context, ms *Metrics) (r int32, err error) {
	var _args1 MetricsTransferTransferArgs
	_args1.Ms = ms
	var _result2 MetricsTransferTransferResult
	if err = p.Client_().Call(ctx, "Transfer", &_args1, &_result2); err != nil {
		return
	}
	return _result2.GetSuccess(), nil
}

// Parameters:
//  - Ms
//  - Datasource
func (p *MetricsTransferClient) TransferWithDatasource(ctx context.Context, ms *Metrics, datasource string) (r int32, err error) {
	var _args3 MetricsTransferTransferWithDatasourceArgs
	_args3.Ms = ms
	_args3.Datasource = datasource
	var _result4 MetricsTransferTransferWithDatasourceResult
	if err = p.Client_().Call(ctx, "TransferWithDatasource", &_args3, &_result4); err != nil {
		return
	}
	return _result4.GetSuccess(), nil
}

type MetricsTransferProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      MetricsTransfer
}

func (p *MetricsTransferProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *MetricsTransferProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *MetricsTransferProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewMetricsTransferProcessor(handler MetricsTransfer) *MetricsTransferProcessor {

	self5 := &MetricsTransferProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self5.processorMap["Transfer"] = &metricsTransferProcessorTransfer{handler: handler}
	self5.processorMap["TransferWithDatasource"] = &metricsTransferProcessorTransferWithDatasource{handler: handler}
	return self5
}

func (p *MetricsTransferProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x6 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x6.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x6

}

type metricsTransferProcessorTransfer struct {
	handler MetricsTransfer
}

func (p *metricsTransferProcessorTransfer) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MetricsTransferTransferArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("Transfer", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := MetricsTransferTransferResult{}
	var retval int32
	var err2 error
	if retval, err2 = p.handler.Transfer(ctx, args.Ms); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Transfer: "+err2.Error())
		oprot.WriteMessageBegin("Transfer", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("Transfer", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type metricsTransferProcessorTransferWithDatasource struct {
	handler MetricsTransfer
}

func (p *metricsTransferProcessorTransferWithDatasource) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MetricsTransferTransferWithDatasourceArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("TransferWithDatasource", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := MetricsTransferTransferWithDatasourceResult{}
	var retval int32
	var err2 error
	if retval, err2 = p.handler.TransferWithDatasource(ctx, args.Ms, args.Datasource); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing TransferWithDatasource: "+err2.Error())
		oprot.WriteMessageBegin("TransferWithDatasource", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("TransferWithDatasource", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Ms
type MetricsTransferTransferArgs struct {
	Ms *Metrics `thrift:"ms,1" db:"ms" json:"ms"`
}

func NewMetricsTransferTransferArgs() *MetricsTransferTransferArgs {
	return &MetricsTransferTransferArgs{}
}

var MetricsTransferTransferArgs_Ms_DEFAULT *Metrics

func (p *MetricsTransferTransferArgs) GetMs() *Metrics {
	if !p.IsSetMs() {
		return MetricsTransferTransferArgs_Ms_DEFAULT
	}
	return p.Ms
}
func (p *MetricsTransferTransferArgs) IsSetMs() bool {
	return p.Ms != nil
}

func (p *MetricsTransferTransferArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MetricsTransferTransferArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Ms = &Metrics{
		List: []*Metric{},
	}
	if err := p.Ms.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ms), err)
	}
	return nil
}

func (p *MetricsTransferTransferArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Transfer_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MetricsTransferTransferArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ms", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ms: ", p), err)
	}
	if err := p.Ms.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ms), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ms: ", p), err)
	}
	return err
}

func (p *MetricsTransferTransferArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MetricsTransferTransferArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetricsTransferTransferResult struct {
	Success *int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetricsTransferTransferResult() *MetricsTransferTransferResult {
	return &MetricsTransferTransferResult{}
}

var MetricsTransferTransferResult_Success_DEFAULT int32

func (p *MetricsTransferTransferResult) GetSuccess() int32 {
	if !p.IsSetSuccess() {
		return MetricsTransferTransferResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *MetricsTransferTransferResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MetricsTransferTransferResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MetricsTransferTransferResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *MetricsTransferTransferResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Transfer_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MetricsTransferTransferResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *MetricsTransferTransferResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MetricsTransferTransferResult(%+v)", *p)
}

// Attributes:
//  - Ms
//  - Datasource
type MetricsTransferTransferWithDatasourceArgs struct {
	Ms         *Metrics `thrift:"ms,1" db:"ms" json:"ms"`
	Datasource string   `thrift:"datasource,2" db:"datasource" json:"datasource"`
}

func NewMetricsTransferTransferWithDatasourceArgs() *MetricsTransferTransferWithDatasourceArgs {
	return &MetricsTransferTransferWithDatasourceArgs{}
}

var MetricsTransferTransferWithDatasourceArgs_Ms_DEFAULT *Metrics

func (p *MetricsTransferTransferWithDatasourceArgs) GetMs() *Metrics {
	if !p.IsSetMs() {
		return MetricsTransferTransferWithDatasourceArgs_Ms_DEFAULT
	}
	return p.Ms
}

func (p *MetricsTransferTransferWithDatasourceArgs) GetDatasource() string {
	return p.Datasource
}
func (p *MetricsTransferTransferWithDatasourceArgs) IsSetMs() bool {
	return p.Ms != nil
}

func (p *MetricsTransferTransferWithDatasourceArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MetricsTransferTransferWithDatasourceArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Ms = &Metrics{
		List: []*Metric{},
	}
	if err := p.Ms.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ms), err)
	}
	return nil
}

func (p *MetricsTransferTransferWithDatasourceArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Datasource = v
	}
	return nil
}

func (p *MetricsTransferTransferWithDatasourceArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TransferWithDatasource_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MetricsTransferTransferWithDatasourceArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ms", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ms: ", p), err)
	}
	if err := p.Ms.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ms), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ms: ", p), err)
	}
	return err
}

func (p *MetricsTransferTransferWithDatasourceArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("datasource", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:datasource: ", p), err)
	}
	if err := oprot.WriteString(string(p.Datasource)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.datasource (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:datasource: ", p), err)
	}
	return err
}

func (p *MetricsTransferTransferWithDatasourceArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MetricsTransferTransferWithDatasourceArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetricsTransferTransferWithDatasourceResult struct {
	Success *int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetricsTransferTransferWithDatasourceResult() *MetricsTransferTransferWithDatasourceResult {
	return &MetricsTransferTransferWithDatasourceResult{}
}

var MetricsTransferTransferWithDatasourceResult_Success_DEFAULT int32

func (p *MetricsTransferTransferWithDatasourceResult) GetSuccess() int32 {
	if !p.IsSetSuccess() {
		return MetricsTransferTransferWithDatasourceResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *MetricsTransferTransferWithDatasourceResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MetricsTransferTransferWithDatasourceResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MetricsTransferTransferWithDatasourceResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *MetricsTransferTransferWithDatasourceResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TransferWithDatasource_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MetricsTransferTransferWithDatasourceResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *MetricsTransferTransferWithDatasourceResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MetricsTransferTransferWithDatasourceResult(%+v)", *p)
}
